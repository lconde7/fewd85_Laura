%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Denis Barbulat) ()
%%Title: (ht-vector-885.eps)
%%CreationDate: 3/2/2012 11:40 AM
%%BoundingBox: 1719 2837 2049 3299
%%HiResBoundingBox: 1719.7334 2837.2295 2048.5874 3298.46
%%DocumentProcessColors: Cyan Magenta Yellow
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_Cropmarks: 0 0 8504 8504
%AI3_TemplateBox: 4252 4252 4252 4252
%AI3_TileBox: 3963.5 3845.8799 4539.5 4665
%AI3_DocumentPreview: Header
%AI5_ArtSize: 8504 8504
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: 1549.5 3507.5 1 1032 804 26 0 0 725 148 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 92 128 8
%%BeginData: 13361 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD53FFCAFD5AFFA2CAA1C4CAFD56FFC4FFFFFFCAC4C4FD54FFA8CA
%A8FFCAFFA8CA9BCACAFD51FFCACAFFFFFFCBFFFFFFC4CBFD50FFCBCAFFCA
%FFCAFFCAFFCACBA2FD50FFCAFFFFFFCAFFCBFFCAFFCACAFD4FFFCACAA8FF
%CAFFA8FFCAFFA8CACAFD4FFFCBCAFFFFFFCAFD04FFCBCAFD50FFC4FFCACB
%A2CACAFFCACBA2FD50FFC4FFFFFFC4CBC4FFCAFFCAFD50FFA2CAA8CBA2CB
%A2CACAFFA2CBFD4FFFCACBFFFFC4CBC4FFFFFFCACBFD4DFFCBCAA2CBCBCA
%A2CBCACBCAFFCACACAFD46FFCBCBCAFFCAFFCAFFCAFFCACACACBCAFFFFFF
%CACBCAFD45FFCBA2CAA2CAA2CAA2CAA8FFA8CAA8FFCAFFA8FFCAFFA2FD46
%FFC4CBCBFFCAFFCACBC4CBCBFFCBFFFFFFCBFFFFFFCACBFD43FFCAFFA2CB
%CAFFCAFFCAFFFFFFA8CBCAFFCAFFCAFFCAFFCACAA8FD44FFC4FFFFFFCAFD
%07FFCAFFCBFFCAFFCBFFCAFFCAFD3AFFA2CBCBFD07FFCACAA8FFCAFD05FF
%A8FFCAFFA8FFCACAA8FFCAFFA8CACAFD38FFC3FD04CAFD05FFCACBCAFFCB
%FD05FFCAFFFFFFCBFFFFFFCBFFCACBCBFFCAFD38FFA1CACAFFCACAA2CBFF
%FFA2CAA2CBCAFD05FFCAFFCAFFCAFFCAFFCAFFCAFFC4CAA8FFCAFD36FFCA
%CAFFFFCAFFFFFFFD04CAA1C4C4CACAFFFFFFCAFFCBFFCAFFCBFFCAFFCBFF
%CAFFCACACAFD36FFCAC4A8FFCAFFA8FFCAFFA8CBA2C4A1C4A1C4A8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFA8C4A2FD35FFCAC4FFFFFFCBFFFFFFCA
%FFFFFFCACAC4C4C3CAC4CBCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCACACA
%FD33FFCBA1FFCAFFCAFFCAFFCAFD06FFCBA1C4A1C4A2CAA8FFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFA8CACAFD31FFC4A1CACAFFCAFFCBFFCAFD09FFCAC4
%A1C4C4CACAFFFFFFCAFFCBFFCAFFCBFFCAFFCBFFCACAFD30FFC4A1FFA8CA
%A2CAA8FFCAFFCAFD05FFCAFFA8FFCACAA1C4A1C4A1CACAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA1FD30FFC3CBFD04FFC4CACAFD09FFCBFFFFFFCBFFC4CAC4
%C4C4CACAFFFFFFCBFFFFFFCBFD04FFCBCAFD2EFF9BCACAFFCAFFCAFFA8CA
%C4FD07FFCAFFCAFFCAFFCAFFCAC4A1C4A1C4A2FFCAFFCAFFCAFFCAFFCAFF
%A8CBFD2DFFCAC4CAFFCBFFCAFFCBFFCBFFCACBFD04FFCAFFCBFFCAFFCBFF
%CAFFCBCAC4CAC4C4C4CBCBFFCAFFCBFFCAFFFFCBCAFD2CFFA8C4A2FFA8FF
%CAFFA8FFCAFFFFFFCACAA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACBA2C4A1C4
%A1CAA8FFA8FFCAFFA8FFA2CBFD2CFFCAC4FFCBFFFFFFCBFFCBFD06FFCBC4
%FD05FFCBFFFFFFCBFFFFFFCBFFCACAC4CAC4C4C4FFFFFFCBFFCACBFD2CFF
%CA9BCBCAFFCAFFCAFFCAFD07FFCACBC4CAA8FFCAFFCAFFCAFFCAFFCAFFCA
%FFCACAA1C4A1C4A1CACAFFCACACAFD2CFFC4C4CBFFCBFFCAFFCBFD09FFCA
%FFCACACAFFFFFFCAFFCBFFCAFFCBFFCAFFFFFFFD04C4A1CACACBCAFD2DFF
%CBA1CAA8FFCAFFA8FFCAFD05FFCAFFCAFFA8FFCACAA2CACAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8C4A1C49BC4A2FD30FFC4CBFFFFCBFD09FFCBFFCBFD05
%FFCACACAFFFFFFCBFFFFFFCBFFFFFFCBFFCBCBC4C4C4CAFD31FFA1C4CAFF
%CAFD07FFCAFFCAFFCAFFCAFFCAFFCACAA2FFCAFFCAFFCAFFCAFFCAFFCAFF
%CACBA1CACAFD30FFCAC49BC4C4FD07FFCBFFCAFFCBFFCAFFCBFFCAFFFFCB
%C4CBCBFFCAFFCBFFCAFFCBFFCAFFFFFFCACACBFD2AFFA8FFCACAA2C49BC4
%A1C4A1CBFD04FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA2CAA8FFA8FFCA
%FFA8FFCAFFA8FFCAFFA8CAA2FD28FFC4CBCAFFCACAC3C4CBFFCBCAA1CAFD
%06FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFCBCAC4FFFFFFCBFFFFFFCBFFFFFF
%CBFFFFCBC4FD24FFCAC49BC4A1CAA2C49BC4A1CBCAFFCACBA1C4CAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACBA2CACAFFCAFFCAFFCAFFCAFF
%CAFFCACBA1CAFD21FFCAC49BCACACBCACBC4C49BC4C4FFCBFFFFFFCAC4C3
%CACAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFFFFFCACACAFFCAFFCBFFCA
%FFCBFFCAFFFFFFA1CBFD1FFFA2C39BCAA8FFCAFFA8FFCACAA1C49BCAA8FF
%CAFFA8CA9BC4A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8CAA2CA
%A8FFCAFFA8FFCAFFA8FFCAC4A1FD1EFFCAC4C3CBFD04FFCBFD05FFCAC49B
%CACAFFCBFFFFFFC4C4C4FD05FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFC4
%CBCBFFCBFFFFFFCBFFFFFFC3CBFD1EFFC49BCBCBFFCAFFCAFFCAFFCAFFCA
%FFCACA9BC4C4FFCAFFCAFFA8C4A1CACAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFA8CACAFFCAFFCAFFCAFFC4C3CAFD1DFFCBBDCACBFFCBFFCAFF
%CBFFCAFFCBFFCAFFFFFFC4C4C4FFCBFFCBFFCACBC3C4CAFFFFFFCAFFCBFF
%CAFFCBFFCAFFCBFFCAFFCBFFCACBC4CBCBFFCBFFCAC4C4FD1EFFA1C4CAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8C49BCAA8FFCAFFA8FFA2C4A1CB
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8CBA2CAA8FFCAC49BFD1EFF
%CAC4CAFFCBFFFFFFCBFFFFFFCAFFCBFFCBFFFFFFCBFFFFCBC3C4CAFFCBFF
%FFFFCACAC3CACAFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCACACACB
%9BCBFD1EFFC49BFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%A2C4A2FFCAFFCAFFCACBA1C4A2FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCACAA1C4CBFD1EFFBDCACBFFCBFFCAFFCBFFCAFD07FFCAFFCBFFCAFF
%FFFFCACAC4CACAFFCBFFCBFFCAC4A1CBFFFFCAFFCBFFCAFFCBFFCAFFCBFF
%CAFFCBFFFFCAC4FD1EFFA2C4CAFFA8FFCAFFA8FFCAFD07FFCAFFA8FFCAFF
%A8FFCAFFA8CBA1C4A8FFCAFFA8FFCACA9BC4CAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA1C4CAFD1DFFC4C4FFCBFFFFFFCBFFCBFD0BFFCBFFCBFFFF
%FFCBFFFFFFCAC4C4FD07FFC4C4C4FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCA
%C4CAFD1DFFCA9BCBCAFFCAFFCAFFCAFD0DFFCAFFCAFFCAFFCAFFCAFFCACA
%A1CACAFFCAFFCAFFCAC49BCACAFFCAFFCAFFCAFFCAFFCAFFCAC49BFD1EFF
%C3C4CAFFCBFFCAFFCBFD11FFCAFFCBFFCAFFCBFFCBFFC4C4C4FFFFFFCAFF
%FFCAA1C4CAFFCBFFCBFFCAFFCBFFCBCABDCBFD1DFFA8C3A8FFA8FFCAFFA8
%FFCAFD11FFA8FFCAFFA8FFCAFFA8FFA8C49BCACAFFA8FFCACBA1C4A1CAA8
%FFCAFFA8FFCACB9BC4FD1EFFC4C4FFCBFFFFFFCBFFCBFD11FFCBFFFFFFCB
%FFFFFFCBFFFFFFCBCBC3C4CAFFFFFFCBFFCACA9BCACAFFCBFFFFFFC4C4CA
%FD1DFFCB9BCACAFFCAFFCAFFCAFD11FFCBFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFA2C3A1CACAFFCAFFCACA9BC4A2CACAFFCAC3A1FD1EFFC4C4CAFFCBFF
%CAFFCBFD13FFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCAC49BC4CAFFCBFF
%FFCA9BC4C4CACAC4BDFD1EFFA8C3A8FFA8FFCAFFA8FFCAFD11FFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCACA9BC3A1CAA8FFA2C3A2FFCACA9BC4
%FD1EFFCAC4FFCBFFFFFFCBFD13FFCAFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF
%CBFD05FFCAC49BC4C4C49BCBFD22FFCB9BCBCAFFCAFFCAFFCAFD11FFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAC49BC4A1C3A2FD
%22FFC4C4CAFFCBFFCAFFCBFD13FFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFF
%CBFFCAFFCBFFCAFFFFCAA1C4C3CAFD21FFA8C4A8FFA8FFCAFFA8FFCAFD11
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACA9B
%C49BFD21FFCAC4FFCBFFFFFFCBFD13FFCAFFFFFFCBFFFFFFCBFFFFFFCBFF
%FFFFCBFFFFFFCBFFFFFFCBFD05FFC3C4C4FD1FFFCB9BCBCAFFCAFFCAFFCA
%FD11FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCACA9BC4CBFD1EFFC4CACBFFCBFFCAFFCBFD11FFCBFFCBFFCAFFCB
%FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAC4C3FD1E
%FFA2C4CAFFA8FFCAFFA8FFCBFD0FFFCBFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA1C4CAFD1DFFC4CAFFCBFF
%FFFFCBFD13FFCAFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF
%CBFFFFFFCBFD04FFCBBDCBFD1CFFCAA1FFCAFFCAFFCAFFCAFD11FFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFA2C4CAFD1CFFC3CBCBFFCBFFCAFFCBFD11FFCAFFCBFFCAFFCBFFCAFFCB
%FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFFFCA9BFD1CFFA1
%C4CAFFA8FFCAFFA8FD11FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA1C4A8FD1AFFCAC4CBFFCBFFFF
%FFCBFD13FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFFFCBFFCAC4C4FD1BFFC4A2FFCAFFCAFFCAFFCAFD11FFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAC49BFD1BFFCAC4FFCAFFCBFFCAFFCBFD11FFCAFFCBFFCAFFCBFFCA
%FFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFFFCA9BCAFD
%1AFFCB9BCBCAFFA8FFCAFFA8FD11FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8CB9BC4CAFD1AFFC3CAFF
%FFCBFFFFFFCBFD13FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFFFCBFFFFFFCBFFC4C4CAFD1AFFC4C4CAFFCAFFCAFFCAFFCA
%FD11FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFA2C4C4FD1AFFCAC4CAFFCAFFCBFFCAFFCBFD11FFCAFFCB
%FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCA
%FFCAC4A2FD1BFFC4A1FFCAFFA8FFCAFFA8FD11FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8C49BFD1BFF
%CAC3FFFFFFCBFFFFFFCAFD13FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBCABDFD1CFF9BCBCAFFCAFFCAFFCA
%FFCAFD0FFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCACA9BCAFD1BFFA1CAFFFFCAFFCBFFCAFD13FFCAFF
%CBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFF
%CBFFC3C4FD1BFFA2C4A8FFCAFFA8FFCAFFA8FD11FFCAFFA8FFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA1C4CAFD1A
%FFCAC4CAFFFFFFCBFFFFFFCAFD13FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF
%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCAC4CAFD1AFFCAC4C4FFCAFFCA
%FFCAFFCAFD11FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAC3A1FD1BFFC4A2FFCBFFCAFFCBFFCAFD13FF
%CAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFF
%CBFFCACAC3FD1BFFCA9BCBA8FFCAFFA8FFCAFFA8FD11FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCACA9BCBFD
%1AFFCBBDCBFD04FFCBFFFFFFCBFD11FFCBFFCBFFFFFFCBFFFFFFCBFFFFFF
%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFC3CAFD1BFF9BC4CAFFCA
%FFCAFFCAFFCAFD11FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFA2C4CAFD1AFFC4C4CAFFCBFFCAFFCBFFCA
%FD13FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCB
%FFCAFFCBFFCAC4CAFD1AFFA2C3A2FFA8FFCAFFA8FFCAFFCAFD0FFFCAFFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAC4A1FD1BFFC4C3FD05FFCBFD15FFCBFFCBFFFFFFCBFFFFFFCBFFFFFF
%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFCB9BFD1BFFCA9BC4CAFFCA
%FFCAFFCAFFCAFD11FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFA1CAFD1BFFC4C4CAFFCBFFCAFFCBFFCAFD
%13FFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFF
%CAFFCBFFC4C4FD1BFFA8C49BCBA8FFCAFFA8FFCAFD11FFCAFFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAC3A8
%FD1BFFCBC3C4CBFFFFFFCBFFCBFD13FFCBFFCBFFFFFFCBFFFFFFCBFFFFFF
%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFCAC4FD1CFFA1C4A2FFCAFF
%CAFFCAFD13FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCACB9BFD1DFFC49BCAFFFFCAFFCBFD15FFCAFFCBFFCA
%FFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFA1CAFD
%1DFF9BC3A2FFCAFFA8FFCAFD11FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8C4A8FD1DFFC4A1CAFFFFCB
%FD15FFCBFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFC4C4FD1EFFA1C4A1FFCAFFCAFFCAFD11FFCAFFCAFFCAFFCA
%FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACAA1FD1F
%FFCAC3C4C4FFFFFFCAFFCBFD0FFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFF
%CBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFFFFFA1CBFD1FFFA2C49BC4A1C4A8
%FFA8FFCAFFA8FD0BFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFA2C4CAFD20FFC4C4C3FFCACAC4CBCBFFCB
%FFCBFD0DFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFC4CAFD21FFCB9BC4A1FFCACBA2C4C4CBCAFFCAFFCAFD07FF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCACAA1FD23FFCBC3C4C4FFFFFFCACAC4CACAFFFFFFCAFD05FFCBFFCA
%FFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCB
%FFA1CBFD24FFCA9BC3A2FFCAFFA8FFA2C4A2FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA8
%C4CAFD25FFCBA1C4CAFFCBFFFFFFCACBC4CACAFFFFFFCAFFFFFFCBFFFFFF
%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFC4CAFD
%28FFA1C4A1CBCAFFCAFFCAFFC4C4A2FFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACBA1FD2AFFCAC4C3CB
%CBFFCBFFCAFFCACAA2CBFFFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFF
%CBFFCAFFCBFFCAFFCBFFCAFFCBFFA1CAFD2BFFA8C49BCAA8FFCAFFA8FFCA
%CBA1C4CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAC4A8FD2DFFCBA1C4CAFFCBFFFFFFCBFFCACAC4FFFFFFCBFF
%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFCAC4FD30FF
%A1C4A2FFCAFFCAFFCAFFCACAA1CACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFF
%CAFFCAFFCAFFCAFFCAFFCACB9BFD32FFCAC4C3CBCAFFCBFFCAFFFFFFC4CA
%CAFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFCAFFCBFFC4C4FD33
%FFCACA9BC4A8FFCAFFA8FFCAFFA8C4A2CBA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAC3A8FD36FFC4C4C4FD05FFCBFFFFCBC4CBFFFFCB
%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFCAC3FD38FFA8C49BCACAFFCA
%FFCAFFCACBA2CACAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCACB9BCAFD
%3AFFCBC3C4CAFFFFFFCAFFFFFFCACACAFFCBFFCBFFCAFFCBFFCAFFCBFFCA
%FFFFFFA1C4FD3DFFA2C3A1CBCAFFA8FFCAFFA8CAA1CAA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFA2BDA2FD3EFFCACAC3CACAFFFFFFCBFFFFCBC4CBFFFFCBFF
%FFFFCBFFFFFFCBFFCAC4C3FD41FFCBA1C3A1FFCAFFCAFFCAFFA1C4CAFFCA
%FFCAFFCAFFCAFFA8C49BCAFD43FFCAC49BCACAFFCBFFFFFFC4C4CAFFCAFF
%CBFFCAFFCAC49BCAFD46FFCA9BC4A1CAA8FFCAFFA8C4A2FFA8FFCACBA1C4
%9BC4CAFD48FFCAC49BC4CAFFCAFFFFCAC4FFCACAC3C4C3C4FD4CFFCA9BC4
%9BC4A1CAC4C49BC49BC49BCAFD4FFFCAC4C3C49BC4C3C49BC4C3CBFD51FF
%CBFFA2C49BC49BC4A2FD2EFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 42 41 0 0 100 Lb
(#Layer 1) Ln
0 A
u
0 O
0.003922 0.101961 0.011765 0 0.984314 0.909804 0.933333 Xa
0 J 0 j 1 w 4 M []0 d1 XR
1868.8418 3167.0693 m
1866.5527 3168.6318 1864.0498 3170.3418 1862.9253 3171.1191 c
1860.5952 3172.7285 1860.0225 3174.1836 1862.9458 3178.3066 C
1865.8691 3182.4287 1877.2803 3201.7217 1878.9575 3203.9229 c
1880.6357 3206.123 1883.4751 3204.2197 Y
1892.6602 3219.835 1895.4883 3223.584 v
1898.3174 3227.333 1902.4961 3229.0098 1909.4082 3225.4502 C
1916.3198 3221.8906 1930.3345 3214.7822 Y
1930.3262 3216.9199 1928.084 3218.3564 v
1925.8423 3219.793 1926.0464 3221.5078 1928.1616 3221.2764 c
1930.2769 3221.0439 1930.5469 3222.3467 1931.417 3222.833 c
1932.2866 3223.3203 1933.0498 3222.8799 Y
1932.2813 3224.0527 1932.9971 3226.0342 V
1933.7129 3228.0156 1936.3335 3234.3477 1941.645 3239.6133 C
1946.9561 3244.8789 1957.9482 3247.4658 1963.4775 3247.3857 c
1969.0059 3247.3057 1978.0215 3246.6426 1984.3789 3250.9336 C
1990.7354 3255.2256 1998.4546 3263.6201 2001.2485 3270.9463 C
2004.042 3278.2734 2004.1211 3279.9043 2008.1738 3286.9229 c
2012.2266 3293.9424 2017.1592 3301.9893 2027.0986 3296.8096 c
2032.1094 3294.1992 2038.2188 3290.6709 2042.9854 3287.6367 c
2052.4414 3281.6191 2047.9385 3273.3242 2043.8862 3266.3047 c
2039.8335 3259.2852 2038.4609 3258.4014 2033.5127 3252.3193 C
2028.5649 3246.2363 2025.1543 3235.3535 2024.6162 3227.7031 c
2024.0781 3220.0518 2029.1602 3212.5752 2031.9941 3207.8281 c
2034.8281 3203.0801 2038.083 3192.2656 2036.1782 3185.0342 C
2034.2744 3177.8008 2030.1016 3172.3652 2028.7432 3170.7549 c
2027.3848 3169.1445 2025.9849 3169.2236 Y
2026.748 3168.7832 2026.7612 3167.7861 V
2026.7749 3166.7891 2025.7817 3165.9043 2027.0405 3164.1885 c
2028.2988 3162.4727 2026.9155 3161.4385 2024.5503 3162.6621 c
2022.1855 3163.8848 2020.3301 3162.8242 Y
2033.4932 3154.2402 2040.0322 3150.0352 V
2046.5708 3145.8281 2047.2075 3141.3711 2045.375 3137.0469 C
2043.543 3132.7227 2034.6123 3116.9609 Y
2037.6807 3115.4531 2036.6138 3112.9004 v
2035.5469 3110.3467 2024.5435 3090.8184 2022.4346 3086.2246 C
2020.3262 3081.6318 2018.7798 3081.4004 2016.2207 3082.6133 c
2014.7095 3083.3301 2010.9561 3085.1348 2008.1362 3086.4922 C
2007.5801 3087.4521 2007.1772 3088.1279 Y
1995.6216 3094.1836 1983.3125 3100.7617 v
1971.0029 3107.3408 1943.2104 3123.3867 1926.377 3133.1055 c
1909.5425 3142.8242 1882.3101 3159.7324 1875.5454 3163.9189 c
1872.5659 3165.7617 1870.3687 3166.6514 1868.8418 3167.0693 C
f
0.019608 0.541176 0.039216 0 0.933333 0.564706 0.709804 Xa
1873.5015 3163.8926 m
1871.2949 3165.3955 1868.8418 3167.0693 V
1870.3687 3166.6514 1872.5659 3165.7617 1875.5454 3163.9189 c
1882.3101 3159.7324 1909.5425 3142.8242 1926.377 3133.1055 c
1943.2104 3123.3867 1971.0029 3107.3408 1983.3125 3100.7617 c
1995.6216 3094.1836 2007.1772 3088.1279 Y
2007.5801 3087.4521 2008.1362 3086.4922 V
2006.1816 3087.4336 2004.6748 3088.1602 Y
2002.1157 3085.0234 2001.6084 3076.1689 2004.6235 3069.9512 c
2007.6396 3063.7324 2009.8394 3058.1807 2009.0522 3046.7617 C
2008.2651 3035.3438 1998.3438 3023.3721 1989.8906 3012.0068 c
1981.4365 3000.6406 1963.2021 2975.6104 1948.9707 2950.4141 C
1934.7397 2925.2178 1923.0918 2900.6758 1917.4463 2887.0762 C
1911.8013 2873.4766 1906.2178 2856.1611 1888.2241 2843.5605 C
1870.2295 2830.959 1854.5952 2839.3721 1834.0703 2849.6895 C
1821.3262 2856.0957 1803.918 2865.7852 1792.5488 2872.2129 C
1781.2979 2878.8457 1764.2026 2889.0762 1752.2827 2896.9102 C
1733.085 2909.5264 1717.981 2918.8594 1719.8975 2940.7432 C
1721.813 2962.627 1734.0166 2976.1201 1742.9717 2987.8086 c
1751.9277 2999.498 1767.3574 3021.8564 1782.0625 3046.7793 C
1796.7671 3071.7012 1809.3271 3100.0078 1814.9429 3113.0127 C
1820.5591 3126.0156 1825.9663 3140.5938 1835.4609 3146.9844 C
1844.9565 3153.376 1850.8643 3154.2471 1857.7578 3154.7441 c
1864.6504 3155.2412 1872.0654 3160.1094 1873.5015 3163.8926 C
f
*u
2025.2764 3294.7305 m
2017.9541 3297.4102 2014.7236 3293.0488 2011.9224 3287.1934 c
2009.707 3282.5645 2008.2778 3279.0273 2006.0649 3274.1777 C
1999.9893 3260.8594 1995.4458 3251.249 1979.6846 3246.8857 C
1992.4004 3247.7959 2000.1572 3258.8457 2004.9199 3269.3984 c
2008.1147 3276.4775 2012.373 3285.5127 2014.7383 3289.9873 c
2018.4097 3296.9316 2023.6602 3292.6172 2032.3672 3287.5898 c
2041.0737 3282.5635 2047.4355 3280.1738 2043.2573 3273.5215 c
2040.5649 3269.2363 2034.8691 3261.0313 2030.3359 3254.7246 C
2023.5781 3245.3232 2017.8877 3233.0811 2023.457 3221.6133 C
2019.355 3237.4453 2025.4063 3246.1855 2033.9019 3258.1055 c
2036.9961 3262.4473 2039.3442 3265.4531 2042.2461 3269.6865 c
2045.916 3275.04 2048.0776 3280.0186 2042.0957 3285.0195 c
2038.146 3288.3223 2030.1118 3292.9609 2025.2764 3294.7305 c
2025.2764 3294.7305 l
f
1929.6938 3218.5322 m
1927.6636 3219.3916 1928.3838 3220.0322 1929.394 3220.0635 c
1930.4355 3220.0967 1931.1416 3220.3887 1931.5361 3220.957 c
1931.9302 3221.5244 1932.7852 3221.6279 1933.5308 3221.1973 c
1934.2764 3220.7666 1940.5181 3217.8887 1947.3389 3213.4238 c
1957.7026 3206.6406 1968.4336 3201.0977 1978.9863 3195.1318 C
1989.4287 3188.9756 1999.5952 3182.4541 2010.6504 3176.8711 c
2017.9277 3173.1953 2023.541 3169.2295 2024.2871 3168.7988 c
2025.0327 3168.3682 2025.3711 3167.5762 2025.0762 3166.9512 c
2024.7813 3166.3262 2024.8809 3165.5684 2025.374 3164.6504 c
2025.8516 3163.7588 2025.6567 3162.8145 2023.8975 3164.1436 c
2009.1719 3175.2656 1993.9639 3184.2998 1978.1265 3193.6426 C
1962.1162 3202.6875 1946.6885 3211.3408 1929.6938 3218.5322 C
f
*U
1938.9707 3223.7734 m
1939.7739 3232.1738 1945.1401 3238.3262 1951.979 3241.2207 C
1963.0977 3245.9258 1978.499 3239.5234 1987.459 3232.6445 C
1975.1553 3239.3096 1964.7607 3243.6162 1955.3257 3241.1377 c
1948.4038 3239.3184 1943.0225 3234.3154 1938.9707 3223.7734 C
f
2008.7959 3219.7168 m
2018.2134 3214.0693 2032.3193 3203.749 2032.7324 3191.6777 c
2032.979 3184.4648 2028.7446 3178.1934 2023.1299 3172.8574 C
2029.7212 3176.8789 2034.126 3184.7822 2033.728 3192.4033 C
2033.0869 3204.6768 2019.0591 3215.2803 2008.7959 3219.7168 C
f
1994.8779 3230.7227 m
2007.9551 3224.4951 2016.5566 3219.2725 V
2024.2832 3214.3604 2032.1255 3207.6035 2034.5469 3197.3711 C
2029.8271 3211.4219 2016.8071 3217.7773 2004.7236 3224.7539 C
1998.2471 3228.4922 1999.3911 3227.9033 1994.8779 3230.7227 C
f
1947.2241 3241.4922 m
1959.6494 3248.4658 1972.7427 3245.9502 1983.9932 3238.1426 C
1972.4834 3244.6113 1960.3872 3247.2129 1947.2241 3241.4922 C
f
1984.9746 3240.5547 m
1997.4644 3245.6113 2006.4702 3254.1328 2015.2939 3263.9805 C
2019.4199 3268.585 2024.0854 3263.9639 2021.147 3259.498 C
2018.77 3255.8848 2006.3623 3246.4141 2001.6094 3244.3096 C
2007.1675 3248.4746 2015.2725 3254.6035 2019.395 3260.2139 c
2022.2861 3264.1484 2018.9087 3265.6064 2016.6289 3262.9092 C
2009.6489 3254.6514 1995.4521 3241.7305 1984.9746 3240.5547 C
f
1934.5298 3226.2559 m
1934.3086 3225.2158 1933.2461 3223.1992 1936.7075 3221.123 c
1940.1694 3219.0488 1954.9434 3210.04 1964.9146 3204.667 c
1970.7705 3201.5117 1975.7012 3198.5938 1979.6636 3196.3057 c
1983.6265 3194.0176 1988.6191 3191.207 1994.2798 3187.7129 C
2003.918 3181.7646 2019.1064 3173.4736 2022.6348 3171.5137 c
2026.1631 3169.5527 2027.3784 3171.4824 2028.1685 3172.1934 C
2026.3042 3171.3096 2025.4932 3171.0283 2023.3955 3172.0635 C
2019.9175 3173.7803 2016.0737 3176.2275 2012.4775 3178.2285 c
2007.5547 3180.9668 1999.6113 3185.7012 1995.8525 3187.9199 c
1991.5957 3190.4336 1985.0474 3194.4336 1980.1992 3197.2324 c
1975.3506 3200.0322 1968.6128 3203.7031 1964.3081 3206.1328 c
1960.5068 3208.2783 1952.4351 3212.791 1947.6021 3215.6846 c
1944.0708 3217.7988 1940.0293 3219.9043 1936.8037 3222.0576 c
1934.8579 3223.3564 1934.6963 3224.1992 1934.5298 3226.2559 C
f
0.003922 0.101961 0.011765 0 0.984314 0.909804 0.933333 Xa
1937.3027 3122.9336 m
1927.0742 3128.9102 1892.04 3149.3691 1886.2129 3152.6387 C
1879.3765 3156.4756 1876.9082 3156.0244 1875.5381 3154.6074 c
1874.168 3153.1914 1872.2563 3149.8789 1879.4082 3144.8672 c
1885.019 3140.9346 1915.1572 3120.7598 1930.8252 3111.7148 c
1946.4927 3102.668 1979.0342 3086.6553 1985.2446 3083.7617 c
1993.1606 3080.0742 1995.0728 3083.3867 1995.6147 3085.2813 c
1996.1567 3087.1758 1995.314 3089.5391 1988.5728 3093.542 C
1982.8276 3096.9531 1947.5923 3117.0645 1937.3027 3122.9336 C
f
1928.8965 3108.374 m
1909.6519 3119.3574 1880.9863 3135.7051 1874.8535 3139.123 C
1848.7134 3153.6914 1835.1631 3143.9375 1824.2412 3118.5283 c
1814.3213 3095.4512 1801.2129 3070.0244 1785.5127 3043.7383 c
1769.812 3017.4521 1754.1055 2996.1436 1744.3931 2981.5889 c
1726.5776 2954.8906 1721.2749 2928.4961 1747.6499 2907.4189 c
1762.5449 2895.5156 1781.04 2884.1777 1795.1621 2876.7393 C
1808.665 2868.2285 1827.7314 2857.8799 1845.4873 2850.9316 C
1876.9277 2838.6289 1897.1353 2856.4189 1911.3486 2885.1973 c
1919.0977 2900.8857 1929.6978 2925.1416 1944.6123 2951.8818 c
1959.5269 2978.6221 1974.9922 3002.6875 1990.0181 3022.8174 c
2006.562 3044.9805 2008.2344 3061.5918 1982.5479 3076.9463 c
1976.521 3080.5488 1948.0308 3097.1992 1928.8965 3108.374 C
f
0.019608 0.541176 0.039216 0 0.933333 0.564706 0.709804 Xa
1731.3433 2926.3271 m
1775.1074 2909.6855 1833.7227 2875.8447 1870.0161 2846.2637 C
1871.8726 2845.7988 1873.7295 2845.335 1875.5859 2844.8701 C
1843.2246 2872.9248 1767.8276 2916.4551 1727.3506 2930.4531 C
1728.6816 2929.0781 1730.0122 2927.7031 1731.3433 2926.3271 C
f
1931.5361 3216.9375 m
1962.1802 3202.7051 1993.9482 3184.3643 2021.5947 3164.9414 c
2021.873 3164.7461 2022.271 3164.3457 2021.7456 3164.2461 c
2021.2197 3164.1455 2020.0552 3163.8633 2019.2007 3164.4395 C
1992.5542 3182.4209 1961.1943 3200.5273 1932.2988 3214.6133 c
1931.3721 3215.0645 1931.0342 3216.2139 1930.8584 3216.7197 c
1930.6826 3217.2246 1931.228 3217.0801 1931.5361 3216.9375 C
f
0 0 0 0 1 1 1 Xa
1866.6406 3154.9111 m
1863.0898 3150.2129 1858.9653 3150.2305 v
1854.8408 3150.249 1852.0864 3150.7422 1850.4624 3150.4141 c
1848.8379 3150.0859 1847.4502 3149.874 Y
1853.2207 3154.6143 1858.8496 3150.96 1866.6406 3154.9111 C
f
1903.126 3146.9648 m
1910.9722 3161.5078 1914.2583 3166.9092 v
1917.5444 3172.3105 1924.0854 3182.46 Y
1926.1299 3181.3047 L
1934.4434 3194.9434 1936.8657 3198.8857 v
1939.2881 3202.8281 1942.2813 3207.7588 Y
1926.2852 3216.043 L
1917.0352 3201.3369 1915.3418 3198.2354 v
1913.6484 3195.1338 1910.854 3189.958 Y
1908.75 3191.1504 L
1898.8848 3176.0488 1895.188 3169.6455 v
1891.4907 3163.2422 1887.5449 3156.1172 Y
1903.126 3146.9648 L
f
*u
0.019608 0.541176 0.039216 0 0.933333 0.564706 0.709804 Xa
1873.5015 3163.8926 m
1865.2549 3169.5098 1862.9253 3171.1191 v
1860.5952 3172.7285 1860.0225 3174.1836 1862.9458 3178.3066 C
1865.8691 3182.4287 1877.2803 3201.7217 1878.9575 3203.9229 c
1880.6357 3206.123 1883.4751 3204.2197 Y
1892.6602 3219.835 1895.4883 3223.584 v
1898.3174 3227.333 1902.4961 3229.0098 1909.4082 3225.4502 C
1916.3198 3221.8906 1930.3345 3214.7822 Y
1942.0132 3209.0723 1965.7188 3195.3066 1975.7075 3189.4531 C
1985.7715 3183.7295 2009.5449 3170.082 2020.3301 3162.8242 C
2020.3301 3162.8242 L
2033.4932 3154.2402 2040.0322 3150.0352 V
2046.5708 3145.8281 2047.2075 3141.3711 2045.375 3137.0469 C
2043.543 3132.7227 2034.6123 3116.9609 Y
2037.6807 3115.4531 2036.6138 3112.9004 v
2035.5469 3110.3467 2024.5435 3090.8184 2022.4346 3086.2246 C
2020.3262 3081.6318 2018.7798 3081.4004 2016.2207 3082.6133 c
2013.6621 3083.8262 2004.6748 3088.1602 Y
2004.6748 3088.1602 L
1999.6309 3091.0713 1964.1382 3110.6641 1938.5625 3125.1162 C
1913.2588 3140.0391 1878.5449 3160.9805 1873.5015 3163.8926 C
1873.5015 3163.8926 L
f
1 D
1924.2661 3216.1006 m
1909.7061 3223.6689 1906.687 3225.2305 1903.9824 3225.3369 c
1901.2783 3225.4424 1898.8003 3223.6709 1896.3135 3219.8672 c
1893.8257 3216.0645 1887.0947 3203.6484 Y
1936.5024 3176.6768 1982.877 3149.9023 2030.9395 3120.5996 c
2038.3257 3132.6367 2040.376 3136.6934 v
2042.4268 3140.749 2042.7217 3143.7803 2041.2778 3146.0693 c
2039.834 3148.3584 2038.3418 3149.4053 2024.5054 3158.2275 c
1994.2056 3177.5469 1956.0122 3199.5986 1924.2661 3216.1006 c
1924.2661 3216.1006 l
f
2007.6333 3133.0371 m
1975.6797 3152.1914 1943.4512 3170.7979 1910.8872 3188.8936 c
1897.4434 3196.3643 1888.7339 3200.4414 1886.416 3201.6924 c
1884.0981 3202.9434 1882.8076 3202.2119 1881.3232 3199.9424 c
1879.8389 3197.6719 1866.5723 3174.8447 1865.875 3173.3359 c
1865.1782 3171.8281 1867.48 3170.1182 1869.605 3168.6641 c
1892.7075 3152.8535 1984.4541 3099.8848 2009.6968 3087.7813 C
2012.0186 3086.668 2014.6504 3085.5303 2015.6084 3086.8877 c
2016.5659 3088.2451 2029.7021 3111.1484 2030.9258 3113.5693 c
2032.1494 3115.9893 2032.1377 3117.4727 2029.895 3118.8545 c
2027.6523 3120.2363 2020.8247 3125.1299 2007.6333 3133.0371 c
f
*U
0 D
0 0 0 0 1 1 1 Xa
1846.772 3100.5869 m
1843.4331 3094.8789 1839.4922 3087.7871 1835.0635 3079.1982 c
1814.6509 3039.6055 1784.7686 2986.9639 1758.6787 2951.0654 c
1755.874 2947.2061 1748.1846 2935.5537 1759.7485 2929.5293 c
1771.3125 2923.5049 1787.7466 2916.8398 1799.3779 2910.0967 C
1817.6162 2948.3789 1880.124 3055.374 1905.207 3098.0068 C
1893.2686 3104.9932 1876.6396 3114.2852 1867.8623 3119.3857 c
1859.1606 3124.4424 1855.0483 3114.7363 1846.772 3100.5869 C
f
1950.2612 3217.3213 m
1955.5674 3227.8008 1961.6963 3232.7451 v
1967.8252 3237.6895 1977.3911 3235.4414 1979.8643 3234.3105 c
1982.3369 3233.1807 1984.8701 3231.123 Y
1977.9873 3232.8643 1971.0991 3229.6973 v
1964.2109 3226.5313 1957.9336 3213.3379 Y
1951.7427 3216.0195 1950.2612 3217.3213 V
f
U
LB
%AI5_EndLayer--
%AI3_BeginCrops
userdict /AI3_noCropMarks known not {
0 A
u
u
0 R
0 G
0 J 0 j 0.5 w 4 M []0 d0 XR
-9 0 m
-36 0 L
S
0 -9 m
0 -36 L
S
U
u
-9 8504 m
-36 8504 L
S
0 8513 m
0 8540 L
S
U
u
8513 8504 m
8540 8504 L
S
8504 8513 m
8504 8540 L
S
U
u
8513 0 m
8540 0 L
S
8504 -9 m
8504 -36 L
S
U
U
} if
%AI3_EndCrops
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
